"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmountMustBePositiveNumber = exports.UserAlreadyExists = exports.AddressAlreadyExists = exports.AddressNotExists = exports.ReceiverNotFound = exports.AddressIsIncorrect = exports.OrderNotfound = exports.TransactionNotFound = exports.OutgoingTransactionNotFound = exports.NotEnoughFunds = exports.CurrencyNotFound = exports.AccounstNotFound = exports.AccountNotFound = exports.NotCorrectValue = exports.UnknownStorageType = exports.CurrencyOrCoinTypeShouldExistError = exports.UserEmailExistsError = exports.UsernameExistsError = exports.InvalidPasswordError = exports.InvalidOldPasswordError = exports.UserEmailUnconfirmedError = exports.UserDeletedError = exports.UserInviteNotAcceptedError = exports.UserExistsError = exports.InvalidEmailConfirmToken = exports.InvalidInviteTokenError = exports.UserNotFoundError = exports.PasswordTooShortError = exports.IncorrectTokenError = exports.ResetTokenExpiredError = exports.InvalidEmailError = exports.MissingDataError = void 0;
exports.MissingDataError = 'Not all required fields are filled in.';
exports.InvalidEmailError = 'Given email is invalid.';
exports.ResetTokenExpiredError = 'Token is expired.';
exports.IncorrectTokenError = 'Something wrong with token.';
exports.PasswordTooShortError = 'Password is too short.';
exports.UserNotFoundError = 'User not found';
exports.InvalidInviteTokenError = 'Invitation token is invalid.';
exports.InvalidEmailConfirmToken = 'Token is invalid.';
exports.UserExistsError = 'User already exists with this email.';
exports.UserInviteNotAcceptedError = 'User has not accepted invite yet.';
exports.UserDeletedError = 'User has been deleted.';
exports.UserEmailUnconfirmedError = 'Users email has not been confirmed yet.';
exports.InvalidOldPasswordError = 'Invalid old password.';
exports.InvalidPasswordError = 'Invalid password';
exports.UsernameExistsError = 'username exists';
exports.UserEmailExistsError = 'User already exists with this email.';
exports.CurrencyOrCoinTypeShouldExistError = 'Currency or CoinType should exist';
exports.UnknownStorageType = 'Unknown storage type.';
exports.NotCorrectValue = 'Not correct value.';
exports.AccountNotFound = 'Account Not Found';
exports.AccounstNotFound = 'Accounts Not Found';
exports.CurrencyNotFound = 'Currency not found!';
exports.NotEnoughFunds = 'Not enough funds';
exports.OutgoingTransactionNotFound = 'Outgoing TransactionNot Found !';
exports.TransactionNotFound = 'Transaction not Found';
exports.OrderNotfound = 'Order not found';
exports.AddressIsIncorrect = 'Address is incorrect';
exports.ReceiverNotFound = 'Receiver not found';
exports.AddressNotExists = 'The address does not exist';
exports.AddressAlreadyExists = 'The address already exists';
exports.UserAlreadyExists = 'User already exists';
exports.AmountMustBePositiveNumber = 'Amount must be a positive number';
//# sourceMappingURL=errors.js.map