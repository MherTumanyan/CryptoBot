import { Schema, SchemaTypeOpts } from 'mongoose';
import { IEntityDefinition, IEntitySchemaField, IEntitySchema } from '@sfast/gql-schema-parser';
import { MongooseSchemaFieldType } from './types';
export declare const getRowType: (type: string) => string;
/**
 * hashes the value
 * @param value '@hash' directive value
 */
export declare function hashValue(value: string): string;
/**
 * Gets mongoose definition
 * @param field
 */
export declare function getFieldMongooseDefinition(field: IEntitySchemaField): SchemaTypeOpts<MongooseSchemaFieldType>;
/**
 * Parses graphql types to mongoose types
 * @param field - schema field
 */
export declare function parseToMongooseType(field: IEntitySchemaField): string | IEntitySchema | Array<string | IEntitySchema>;
export declare function createSchema(schema: any, schemaClassType?: typeof Schema, directives?: any): Schema<any>;
export declare function mongooseSchemaDefinition(schema: IEntitySchema, schemaClassType?: typeof Schema): Record<string, SchemaTypeOpts<MongooseSchemaFieldType>>;
export declare function createMongooseSchema(entity: IEntityDefinition): Schema;
export declare function generateUuid(): string;
export declare function customPlugin(schema: Schema): void;
