"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var mongoose_1 = require("mongoose");
var gql_schema_parser_1 = require("@sfast/gql-schema-parser");
var utils_1 = require("./utils");
var ParseToMongoose = /** @class */ (function (_super) {
    __extends(ParseToMongoose, _super);
    function ParseToMongoose(graphNode, options) {
        var _this = _super.call(this, graphNode, options) || this;
        _this.mongooseEntities = {};
        _this.mongooseSchemas = {};
        _this.mongooseEntities = _this.getMongooseEntities(_this._entities);
        _this.mongooseSchemas = _this.createMongooseSchemas(_this.mongooseEntities);
        return _this;
    }
    ParseToMongoose.prototype.getEntitySchema = function (typeName) {
        if (!this.mongooseSchemas[typeName]) {
            throw new Error(typeName + " not found");
        }
        return this.mongooseSchemas[typeName];
    };
    ParseToMongoose.prototype.getEntityByName = function (name) {
        if (name in this.mongooseEntities) {
            return this.mongooseEntities[name];
        }
        throw new Error(name + " not found");
    };
    ParseToMongoose.prototype.getEntityCollectionValue = function (entityName) {
        return this.mongooseEntities[entityName] && this.mongooseEntities[entityName].collection
            ? this.mongooseEntities[entityName].collection
            : undefined;
    };
    ParseToMongoose.prototype.createMongooseEntity = function (entity) {
        var mongoooseEntitySchema = this.getMongooseSchemaDefinition(entity.schema);
        var mongooseSchema = this.createMongooseSchema(mongoooseEntitySchema);
        mongooseSchema.plugin(utils_1.customPlugin);
        return __assign(__assign(__assign({}, entity), { schema: mongoooseEntitySchema }), { mongooseSchema: mongooseSchema });
    };
    /**
     * Parses schema of Entity to mongoose schema
     * @param schema
     */
    ParseToMongoose.prototype.getMongooseSchemaDefinition = function (schema) {
        // tslint:disable-next-line:variable-name
        var SchemaClass = this._options && this._options.mongoose ? this._options.mongoose.Schema : mongoose_1.Schema;
        delete schema._id;
        return utils_1.mongooseSchemaDefinition(schema, SchemaClass);
    };
    /**
     * parses entity schema to mongoose Schema types
     * @param entities
     */
    ParseToMongoose.prototype.getMongooseEntities = function (entities) {
        var _this = this;
        var parsedEntities = {};
        Object.entries(entities).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var name = value.name, namespace = value.namespace, collection = value.collection, version = value.version, directives = value.directives;
            parsedEntities[key] = {
                name: name,
                namespace: namespace,
                schema: _this.getMongooseSchemaDefinition(value.schema),
                collection: collection,
                version: version,
                directives: directives
            };
        });
        return parsedEntities;
    };
    /**
     * creates mongoose Schemas from mongooseEntities which have collection directive
     * @param mongooseEntities
     */
    ParseToMongoose.prototype.createMongooseSchemas = function (mongooseEntities) {
        var _this = this;
        var schemas = {};
        var enitiesWithCollection = lodash_1.filter(Object.keys(mongooseEntities), function (key) {
            return !!mongooseEntities[key].collection;
        });
        enitiesWithCollection.forEach(function (key) {
            var schema = _this.createMongooseSchema(mongooseEntities[key].schema, mongooseEntities[key].directives);
            schema.plugin(utils_1.customPlugin);
            schemas[key] = schema;
            _this.mongooseEntities[key].mongooseSchema = schema;
        });
        return schemas;
    };
    /**
     * Creates schema from mongooseEntity
     * @param mongooseEntity
     */
    ParseToMongoose.prototype.createMongooseSchema = function (schema, directives) {
        // tslint:disable-next-line:variable-name
        var SchemaClass = this._options && this._options.mongoose ? this._options.mongoose.Schema : mongoose_1.Schema;
        return utils_1.createSchema(schema, SchemaClass, directives);
    };
    return ParseToMongoose;
}(gql_schema_parser_1.GraphEntityParser));
exports.ParseToMongoose = ParseToMongoose;
