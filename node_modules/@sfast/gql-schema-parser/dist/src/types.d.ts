import { BooleanValueNode, DirectiveDefinitionNode, EnumValueNode, FieldDefinitionNode, FloatValueNode, InputObjectTypeDefinitionNode, InputValueDefinitionNode, IntValueNode, ListValueNode, ObjectTypeDefinitionNode, ScalarTypeDefinitionNode, StringValueNode, TypeDefinitionNode, UnionTypeDefinitionNode, DefinitionNode } from 'graphql';
import { GraphEntityParser } from './parser';
export declare type SchemaTypeDefinitionNode = ObjectTypeDefinitionNode | InputObjectTypeDefinitionNode;
export declare type SchemaFieldDefinitionsNode = FieldDefinitionNode | InputValueDefinitionNode;
export declare type SchemaOrFieldDefinitionNode = SchemaTypeDefinitionNode | SchemaFieldDefinitionsNode;
export declare type TypeDefinitionsNode = SchemaTypeDefinitionNode | UnionTypeDefinitionNode | ScalarTypeDefinitionNode;
export declare type EntitySchemaFieldType = string | IEntitySchema | IUnionFieldType;
export interface IEntitySchemaField {
    name?: string;
    type: EntitySchemaFieldType;
    default?: string | any;
    enum?: IEnumDefinition;
    list?: boolean;
    required?: boolean;
    unique?: boolean;
    setonce?: boolean;
    uuid?: boolean;
    min?: number;
    max?: number;
    maxLength?: number;
    minLength?: number;
    trim: boolean;
    uppercase?: boolean;
    lowercase?: boolean;
    hash?: boolean;
    collection?: string;
    directives?: IDirectivesMeta;
}
export interface IEntitySchema {
    [field: string]: IEntitySchemaField;
}
export interface IEntityDefinition {
    namespace: string;
    name: string;
    collection: string;
    version: string;
    schema: IEntitySchema;
    directives?: IDirectivesMeta;
}
export interface IEnumDefinition {
    name: string;
    values: any[];
}
export interface IScalarDefinition {
    name: string;
}
export interface IUnionDefinition {
    name: string;
    types: string[];
}
export interface IUnionFieldType extends IUnionDefinition {
    kind: 'union';
}
export declare type NodeDirectiveValueType = number | boolean | undefined | string | ListValueNode;
export interface IDirectiveValueNode {
    kind: string;
    value?: string;
    values?: ListValueNode;
}
export interface IDirectivesMeta {
    [directiveName: string]: IDirectiveArgType;
}
export interface IDirectiveArgType {
    [argName: string]: string | boolean | string[];
}
export declare type NodesWithValueProp = IntValueNode | FloatValueNode | StringValueNode | BooleanValueNode | EnumValueNode;
export declare type ValidDefinitionNode = DirectiveDefinitionNode | TypeDefinitionNode;
export interface GQLNodeType {
    name: string;
    directives: IDirectivesMeta;
    fields: any;
    node: any;
}
export interface ChangeableSchemaType {
    kind: 'Document';
    definitions: DefinitionNode[];
}
export interface IGQLPlugin {
    name: string;
    extractFields: (pharser: GraphEntityParser, node: SchemaTypeDefinitionNode, directive: any) => SchemaFieldDefinitionsNode[];
}
export interface CustomInputObjectTypeDef extends Exclude<InputObjectTypeDefinitionNode, 'fields'> {
    fields: any;
}
