import * as isGlob from 'is-glob';
import { asArray, isDocumentString, debugLog, fixWindowsPath } from '@graphql-toolkit/common';
import { filterKind } from './filter-document-kind';
import { documentFromString } from './document-from-string';
import * as globby from 'globby';
export async function loadTypedefsUsingLoaders(loaders, pointerOrPointers, options = {}, filterKinds = [], cwd = process.cwd()) {
    const pointers = asArray(pointerOrPointers);
    const loadPromises$ = [];
    const found = [];
    const foundGlobs = [];
    for (const pointer of pointers) {
        if (isDocumentString(pointer)) {
            loadPromises$.push(Promise.resolve().then(async () => {
                const docs = documentFromString(pointer, filterKinds);
                found.push(...docs);
            }));
        }
        else if (isGlob(pointer)) {
            foundGlobs.push(pointer);
        }
        else {
            loadPromises$.push(Promise.resolve().then(async () => {
                let content = await loadSingleFile(loaders, pointer, options);
                content = filterKind(content, filterKinds);
                if (content && content.definitions && content.definitions.length > 0) {
                    found.push({
                        location: pointer,
                        document: content,
                    });
                }
            }));
        }
    }
    if (foundGlobs.length > 0) {
        if (options.ignore) {
            const ignoreList = asArray(options.ignore)
                .map(g => `!(${g})`)
                .map(p => fixWindowsPath(p));
            if (ignoreList.length > 0) {
                foundGlobs.push(...ignoreList);
            }
        }
        loadPromises$.push(Promise.resolve().then(async () => {
            const paths = await globby(foundGlobs, { cwd, absolute: true });
            await Promise.all(paths.map(async (path) => {
                if (!path.endsWith('.d.ts') && !path.endsWith('.spec.ts') && !path.endsWith('.spec.js') && !path.endsWith('.test.ts') && !path.endsWith('.test.js')) {
                    let content = await loadSingleFile(loaders, path, options);
                    content = filterKind(content, filterKinds);
                    if (content && content.definitions && content.definitions.length > 0) {
                        found.push({
                            location: path,
                            document: content,
                        });
                    }
                }
            }));
        }));
    }
    await Promise.all(loadPromises$);
    if (found.length === 0) {
        throw new Error(`Unable to find any GraphQL type definitions for the following pointers: ${pointers.join(', ')}`);
    }
    return found.sort((left, right) => left.location.localeCompare(right.location));
}
export async function loadSingleFile(loaders, pointer, options = {}) {
    try {
        for (const loader of loaders) {
            const canLoad = await loader.canLoad(pointer, options);
            if (canLoad) {
                const found = await loader.load(pointer, options);
                if (found) {
                    return found.document;
                }
            }
        }
    }
    catch (e) {
        debugLog(`Failed to find any GraphQL type definitions in: ${pointer} - ${e.message}`);
        throw e;
    }
    return null;
}
//# sourceMappingURL=load-typedefs.js.map