"use strict";
// tslint:disable-next-line:no-reference
/// <reference path="../../../../node_modules/reflect-metadata/index.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var graphql_1 = require("graphql");
var common_1 = require("./common");
var scalar_type_1 = require("./scalar-type");
var input_object_type_1 = require("./input-object-type");
exports.GRAPHQL_OBJECT_TYPE_CONFIG = Symbol('graphql:object-type-config');
exports.GRAPHQL_OBJECT_TYPE = Symbol('graphql:object-type');
function ArgumentParameter(argumentParameterConfig) {
    return function (target, propertyKey, parameterIndex) {
        var _a;
        var existingConfig = Reflect.getMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, target.constructor) || {};
        var fieldName = argumentParameterConfig.fieldName || propertyKey;
        var argumentName = argumentParameterConfig.name;
        var argumentType = argumentParameterConfig.type || Reflect.getMetadata(common_1.DESIGN_PARAMTYPES, target, propertyKey)[parameterIndex];
        var argumentGraphQLInputType = input_object_type_1.getInputTypeFromClass(argumentType) || scalar_type_1.getScalarTypeFromClass(argumentType) || argumentType;
        var argumentConfig = {
            type: argumentGraphQLInputType,
        };
        var fieldConfig = {
            args: (_a = {},
                _a[argumentName] = argumentConfig,
                _a),
        };
        existingConfig.fields = existingConfig.fields || {};
        existingConfig.fields[fieldName] = existingConfig.fields[fieldName] || {};
        existingConfig.fields[fieldName] = tslib_1.__assign({}, (existingConfig.fields[fieldName] || {}), fieldConfig);
        Reflect.defineMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, existingConfig, target.constructor);
    };
}
exports.ArgumentParameter = ArgumentParameter;
function FieldProperty(fieldDecoratorConfig) {
    if (fieldDecoratorConfig === void 0) { fieldDecoratorConfig = {}; }
    return function (target, propertyKey) {
        var existingConfig = Reflect.getMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, target.constructor) || {};
        var fieldName = fieldDecoratorConfig.name || propertyKey;
        var fieldType = fieldDecoratorConfig.type || Reflect.getMetadata(common_1.DESIGN_TYPE, target, propertyKey);
        var fieldGraphQLType = getObjectTypeFromClass(fieldType) || scalar_type_1.getScalarTypeFromClass(fieldType) || fieldType;
        var fieldResolver = fieldDecoratorConfig.resolve;
        var fieldConfig = {
            type: fieldGraphQLType,
            resolve: fieldResolver && (function (root, args) { return fieldResolver.call.apply(fieldResolver, [root].concat(Object['values'](args))); }),
        };
        existingConfig.fields = existingConfig.fields || {};
        existingConfig.fields[fieldName] = tslib_1.__assign({}, (existingConfig.fields[fieldName] || {}), fieldConfig);
        Reflect.defineMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, existingConfig, target.constructor);
    };
}
exports.FieldProperty = FieldProperty;
function FieldMethod(fieldDecoratorConfig) {
    if (fieldDecoratorConfig === void 0) { fieldDecoratorConfig = {}; }
    return function (target, propertyKey) {
        var existingConfig = Reflect.getMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, target.constructor) || {};
        var fieldName = fieldDecoratorConfig.name || propertyKey;
        var fieldType = fieldDecoratorConfig.type || Reflect.getMetadata(common_1.DESIGN_RETURNTYPE, target, propertyKey);
        var fieldGraphQLType = getObjectTypeFromClass(fieldType) || scalar_type_1.getScalarTypeFromClass(fieldType) || fieldType;
        var fieldResolver = fieldDecoratorConfig.resolve || target[propertyKey];
        var fieldConfig = {
            type: fieldGraphQLType,
            resolve: function (root, args) { return fieldResolver.call.apply(fieldResolver, [root].concat(Object['values'](args))); },
        };
        existingConfig.fields = existingConfig.fields || {};
        existingConfig.fields[fieldName] = tslib_1.__assign({}, (existingConfig.fields[fieldName] || {}), fieldConfig);
        Reflect.defineMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, existingConfig, target.constructor);
    };
}
exports.FieldMethod = FieldMethod;
function ObjectType(config) {
    return function (target) {
        var existingConfig = Reflect.getMetadata(exports.GRAPHQL_OBJECT_TYPE_CONFIG, target) || {};
        Reflect.defineMetadata(exports.GRAPHQL_OBJECT_TYPE, new graphql_1.GraphQLObjectType(tslib_1.__assign({ name: target.name }, existingConfig, (config || {}))), target);
        return target;
    };
}
exports.ObjectType = ObjectType;
function getObjectTypeFromClass(target) {
    if (target instanceof Array) {
        var elementType = getObjectTypeFromClass(target[0]);
        return elementType && new graphql_1.GraphQLList(elementType);
    }
    return Reflect.getMetadata(exports.GRAPHQL_OBJECT_TYPE, target);
}
exports.getObjectTypeFromClass = getObjectTypeFromClass;
//# sourceMappingURL=object-type.js.map