"use strict";
// tslint:disable-next-line:no-reference
/// <reference path="../../../../node_modules/reflect-metadata/index.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var graphql_1 = require("graphql");
exports.GRAPHQL_SCALAR_TYPE = Symbol('graphql:scalar-type');
function ScalarType(config) {
    return function (target) {
        Reflect.defineMetadata(exports.GRAPHQL_SCALAR_TYPE, new graphql_1.GraphQLScalarType(tslib_1.__assign({ name: target.name, parseValue: function (obj) { return Object.assign(Reflect.construct(target, []), obj); }, parseLiteral: function (obj) { return Object.assign(Reflect.construct(target, []), obj); }, serialize: function (instance) { return Object.assign({}, instance); } }, (config || {}))), target);
    };
}
exports.ScalarType = ScalarType;
var DEFAULT_SCALAR_TYPE_MAP = new Map([
    [String, graphql_1.GraphQLString],
    [Number, graphql_1.GraphQLFloat],
    [Boolean, graphql_1.GraphQLBoolean],
]);
function getScalarTypeFromClass(target) {
    if (target instanceof Array) {
        var elementType = getScalarTypeFromClass(target[0]);
        return elementType && new graphql_1.GraphQLList(elementType);
    }
    return DEFAULT_SCALAR_TYPE_MAP.get(target) || Reflect.getMetadata(exports.GRAPHQL_SCALAR_TYPE, target);
}
exports.getScalarTypeFromClass = getScalarTypeFromClass;
//# sourceMappingURL=scalar-type.js.map