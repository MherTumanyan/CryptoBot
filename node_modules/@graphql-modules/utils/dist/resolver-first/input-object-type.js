"use strict";
// tslint:disable-next-line:no-reference
/// <reference path="../../../../node_modules/reflect-metadata/index.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var graphql_1 = require("graphql");
var common_1 = require("./common");
var _1 = require(".");
var GRAPHQL_INPUT_OBJECT_TYPE_CONFIG = Symbol('graphql:input-object-type-config');
var GRAPHQL_INPUT_TYPE = Symbol('graphql:input-type');
function InputFieldProperty(inputFieldDecoratorConfig) {
    if (inputFieldDecoratorConfig === void 0) { inputFieldDecoratorConfig = {}; }
    return function (target, propertyKey) {
        var existingConfig = Reflect.getMetadata(GRAPHQL_INPUT_OBJECT_TYPE_CONFIG, target.constructor) || {};
        var inputFieldName = inputFieldDecoratorConfig.name || propertyKey;
        var inputFieldType = inputFieldDecoratorConfig.type || Reflect.getMetadata(common_1.DESIGN_TYPE, target, propertyKey);
        var inputFieldGraphQLType = Reflect.getMetadata(GRAPHQL_INPUT_TYPE, inputFieldType) || _1.getScalarTypeFromClass(inputFieldType) || inputFieldType;
        var inputFieldConfig = {
            type: inputFieldGraphQLType,
        };
        existingConfig.fields = existingConfig.fields || {};
        existingConfig.fields[inputFieldName] = tslib_1.__assign({}, (existingConfig.fields[inputFieldName] || {}), inputFieldConfig);
        Reflect.defineMetadata(GRAPHQL_INPUT_OBJECT_TYPE_CONFIG, existingConfig, target.constructor);
    };
}
exports.InputFieldProperty = InputFieldProperty;
function InputObjectType(config) {
    return function (target) {
        var existingConfig = Reflect.getMetadata(GRAPHQL_INPUT_OBJECT_TYPE_CONFIG, target) || {};
        Reflect.defineMetadata(GRAPHQL_INPUT_TYPE, new graphql_1.GraphQLInputObjectType(tslib_1.__assign({ name: target.name }, existingConfig, (config || {}))), target);
        return target;
    };
}
exports.InputObjectType = InputObjectType;
function getInputTypeFromClass(target) {
    if (target instanceof Array) {
        var elementType = getInputTypeFromClass(target[0]);
        return elementType && new graphql_1.GraphQLList(elementType);
    }
    return Reflect.getMetadata(GRAPHQL_INPUT_TYPE, target);
}
exports.getInputTypeFromClass = getInputTypeFromClass;
//# sourceMappingURL=input-object-type.js.map