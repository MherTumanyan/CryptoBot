import { GraphQLObjectType, GraphQLObjectTypeConfig, GraphQLInputType } from 'graphql';
import { ObjectValue, Type, AnyType } from './common';
export declare const GRAPHQL_OBJECT_TYPE_CONFIG: unique symbol;
export declare const GRAPHQL_OBJECT_TYPE: unique symbol;
export declare type FieldResolver<TSource, TArgs, TResult> = (this: TSource, ...args: Array<ObjectValue<TArgs>>) => Promise<TResult> | TResult;
export interface FieldDecoratorConfig<TSource, TArgs, TResult> {
    name?: string;
    type?: Type<TResult> | GraphQLObjectType | AnyType | unknown;
    resolve?: FieldResolver<TSource, TArgs, TResult>;
}
export interface ArgumentParameterDecoratorConfig {
    name: string;
    type?: AnyType | GraphQLInputType;
    fieldName?: string;
}
export declare function ArgumentParameter<TSource, TContext, TArgs>(argumentParameterConfig: ArgumentParameterDecoratorConfig): ParameterDecorator;
export declare function FieldProperty<TSource, TContext, TArgs, TResult>(fieldDecoratorConfig?: FieldDecoratorConfig<TSource, TArgs, TResult>): PropertyDecorator;
export declare function FieldMethod<TSource, TContext, TArgs, TResult>(fieldDecoratorConfig?: FieldDecoratorConfig<TSource, TArgs, TResult>): MethodDecorator;
export declare function ObjectType<TSource, TContext>(config?: Partial<GraphQLObjectTypeConfig<TSource, TContext>>): ClassDecorator;
export declare function getObjectTypeFromClass<T>(target: Type<T> | unknown): any;
