"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const extension_manager_1 = require("./extension-manager");
class SchemaManager {
    constructor(_host) {
        this._host = _host;
        this._onChanges = [];
        this._extensionManager = new extension_manager_1.ExtensionManager(_host);
        this._extensionManager.readExtensions();
    }
    start(interval) {
        this._extensionManager.startWatch(() => this.emitChange(), interval);
        this.startWatch(interval);
    }
    getSchema() {
        const baseSchema = this.getBaseSchema();
        const schema = baseSchema && this._extensionManager.extendSchema(baseSchema);
        if (schema) {
            return { schema, errors: null };
        }
        else {
            return { schema: null, errors: this._extensionManager.getSchemaErrors() };
        }
    }
    waitSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            const baseSchema = yield this.waitBaseSchema();
            if (!baseSchema)
                return { schema: null, errors: null };
            const schema = this._extensionManager.extendSchema(baseSchema);
            if (schema) {
                return { schema, errors: null };
            }
            else {
                return { schema: null, errors: this._extensionManager.getSchemaErrors() };
            }
        });
    }
    registerOnChange(cb) {
        this._onChanges.push(cb);
        return () => {
            this._onChanges = this._onChanges.filter(x => x !== cb);
        };
    }
    emitChange() {
        const { errors, schema } = this.getSchema();
        this._onChanges.forEach(cb => cb(errors, schema));
    }
    log(msg) {
        this._host.log(msg);
    }
}
exports.SchemaManager = SchemaManager;
class NoopSchemaManager extends SchemaManager {
    startWatch() { }
    waitBaseSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            return null;
        });
    }
    getBaseSchema() {
        return null;
    }
}
exports.NoopSchemaManager = NoopSchemaManager;
//# sourceMappingURL=schema-manager.js.map