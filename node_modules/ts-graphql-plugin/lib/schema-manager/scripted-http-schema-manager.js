"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_introspection_query_1 = require("./request-introspection-query");
const path_1 = require("path");
const http_schema_manager_1 = require("./http-schema-manager");
class ScriptedHttpSchemaManager extends http_schema_manager_1.HttpSchemaManager {
    constructor(_host, options) {
        super(_host);
        this._scriptFileName = options.fromScript;
        this._host.watchFile(this._getScriptFilePath(), this._configurationScriptChanged.bind(this), 100);
    }
    _getScriptFilePath() {
        const rootPath = path_1.isAbsolute(this._host.getProjectRootPath()) ? this._host.getProjectRootPath() : process.cwd();
        return path_1.join(rootPath, this._scriptFileName);
    }
    _requireScript(path) {
        delete require.cache[path];
        return require(path);
    }
    _configurationScriptChanged() {
        this._options = null;
    }
    _fetchErrorOcurred() {
        this._options = null;
    }
    _getOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._options !== null) {
                return this._options;
            }
            const configurationScriptPath = this._getScriptFilePath();
            if (!this._host.fileExists(configurationScriptPath)) {
                const errorMessage = `ScriptedHttpSchemaManager configuration script '${configurationScriptPath}' does not exist`;
                this.log(errorMessage);
                throw new Error(errorMessage);
            }
            const configurationScript = this._requireScript(configurationScriptPath);
            let setup = null;
            try {
                setup = yield configurationScript(this._host.getProjectRootPath());
            }
            catch (error) {
                const errorMessage = `ScriptedHttpSchemaManager configuration script '${this._scriptFileName}' execution failed due to: ${error}`;
                this.log(errorMessage);
                throw new Error(errorMessage);
            }
            if (!request_introspection_query_1.isRequestSetup(setup)) {
                const errorMessage = `RequestSetup object is wrong: ${JSON.stringify(setup, null, 2)}`;
                this.log(errorMessage);
                throw new Error(errorMessage);
            }
            if (!/https?:/.test(setup.url)) {
                const errorMessage = `RequestSetup.url have to be valid url: ${setup.url}`;
                this.log(errorMessage);
                throw new Error(errorMessage);
            }
            setup.method = setup.method || 'POST';
            this._options = setup;
            return setup;
        });
    }
}
exports.ScriptedHttpSchemaManager = ScriptedHttpSchemaManager;
//# sourceMappingURL=scripted-http-schema-manager.js.map