"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_manager_1 = require("./schema-manager");
const request_introspection_query_1 = require("./request-introspection-query");
class HttpSchemaManager extends schema_manager_1.SchemaManager {
    constructor(_host, _options = null) {
        super(_host);
        this._options = _options;
        this._schema = null;
    }
    _getOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._options;
        });
    }
    _fetchErrorOcurred() { }
    getBaseSchema() {
        return this._schema;
    }
    waitBaseSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const options = yield this._getOptions();
                if (options === null) {
                    return null;
                }
                return yield request_introspection_query_1.requestIntrospectionQuery(options);
            }
            catch (error) {
                return null;
            }
        });
    }
    startWatch(interval = 1000) {
        const makeRequest = (backoff = interval) => __awaiter(this, void 0, void 0, function* () {
            let options;
            try {
                options = yield this._getOptions();
            }
            catch (error) {
                setTimeout(makeRequest, backoff * 2.0);
                return;
            }
            if (options === null) {
                this.log(`Options cannot be null`);
                setTimeout(makeRequest, backoff * 2.0);
                return;
            }
            try {
                const query = yield request_introspection_query_1.requestIntrospectionQuery(options);
                this.log(`Fetch schema data from ${options.url}.`);
                if (query) {
                    this._schema = query;
                    this.emitChange();
                }
                setTimeout(makeRequest, interval);
            }
            catch (reason) {
                this.log(`Fail to fetch schema data from ${options.url} via:`);
                this.log(`${JSON.stringify(reason, null, 2)}`);
                this._fetchErrorOcurred();
                setTimeout(makeRequest, backoff * 2.0);
            }
        });
        makeRequest();
    }
}
exports.HttpSchemaManager = HttpSchemaManager;
//# sourceMappingURL=http-schema-manager.js.map