"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const schema_manager_1 = require("./schema-manager");
const graphql_1 = require("graphql");
function extractIntrospectionContentFromJson(jsonObject) {
    if (jsonObject.data) {
        return jsonObject.data;
    }
    else {
        return jsonObject;
    }
}
class FileSchemaManager extends schema_manager_1.SchemaManager {
    constructor(_host, options) {
        super(_host);
        this._host = _host;
        this._schemaPath = options.path;
    }
    getBaseSchema() {
        if (!this._schemaPath || typeof this._schemaPath !== 'string')
            return null;
        try {
            const resolvedSchmaPath = this.getAbsoluteSchemaPath(this._host.getProjectRootPath(), this._schemaPath);
            this.log('Read schema from ' + resolvedSchmaPath);
            const isExists = this._host.fileExists(resolvedSchmaPath);
            if (!isExists)
                return null;
            if (this._schemaPath.endsWith('.graphql') || this._schemaPath.endsWith('.gql')) {
                const sdl = this._host.readFile(resolvedSchmaPath, 'utf-8');
                return sdl ? graphql_1.buildSchema(sdl) : null;
            }
            else {
                const introspectionContents = this._host.readFile(resolvedSchmaPath, 'utf-8');
                return introspectionContents
                    ? graphql_1.buildClientSchema(extractIntrospectionContentFromJson(JSON.parse(introspectionContents)))
                    : null;
            }
        }
        catch (e) {
            this.log('Fail to read schema file...');
            this.log(e.message);
            return null;
        }
    }
    waitBaseSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getBaseSchema();
        });
    }
    getAbsoluteSchemaPath(projectRootPath, schemaPath) {
        if (path_1.default.isAbsolute(schemaPath))
            return schemaPath;
        return path_1.default.resolve(projectRootPath, schemaPath);
    }
    startWatch(interval = 100) {
        const resolvedSchmaPath = this.getAbsoluteSchemaPath(this._host.getProjectRootPath(), this._schemaPath);
        this._watcher = this._host.watchFile(resolvedSchmaPath, () => {
            this.log('Change schema file.');
            this.emitChange();
        }, interval);
    }
    closeWatch() {
        if (this._watcher)
            this._watcher.close();
    }
}
exports.FileSchemaManager = FileSchemaManager;
//# sourceMappingURL=file-schema-manager.js.map