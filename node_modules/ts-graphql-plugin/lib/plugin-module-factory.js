"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_language_service_adapter_1 = require("./graphql-language-service-adapter");
const language_service_proxy_builder_1 = require("./language-service-proxy-builder");
const schema_manager_factory_1 = require("./schema-manager/schema-manager-factory");
const schema_manager_host_1 = require("./schema-manager/schema-manager-host");
const script_source_helper_1 = require("./ts-ast-util/script-source-helper");
function create(info) {
    const logger = (msg) => info.project.projectService.logger.info(`[ts-graphql-plugin] ${msg}`);
    logger('config: ' + JSON.stringify(info.config));
    const schemaManager = new schema_manager_factory_1.SchemaManagerFactory(schema_manager_host_1.createSchemaManagerHostFromPluginInfo(info)).create();
    const { schema, errors: schemaErrors } = schemaManager.getSchema();
    const config = info.config;
    const tag = config.tag;
    const removeDuplicatedFragments = config.removeDuplicatedFragments === false ? false : true;
    const adapter = new graphql_language_service_adapter_1.GraphQLLanguageServiceAdapter(script_source_helper_1.createScriptSourceHelper(info), {
        schema,
        schemaErrors,
        logger,
        tag,
        removeDuplicatedFragments,
    });
    const proxy = new language_service_proxy_builder_1.LanguageServiceProxyBuilder(info)
        .wrap('getCompletionsAtPosition', delegate => adapter.getCompletionAtPosition.bind(adapter, delegate))
        .wrap('getSemanticDiagnostics', delegate => adapter.getSemanticDiagnostics.bind(adapter, delegate))
        .wrap('getQuickInfoAtPosition', delegate => adapter.getQuickInfoAtPosition.bind(adapter, delegate))
        .build();
    schemaManager.registerOnChange(adapter.updateSchema.bind(adapter));
    schemaManager.start();
    return proxy;
}
const moduleFactory = () => {
    return { create };
};
exports.default = moduleFactory;
//# sourceMappingURL=plugin-module-factory.js.map