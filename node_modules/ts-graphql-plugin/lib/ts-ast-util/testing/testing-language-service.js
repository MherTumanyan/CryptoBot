"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const path_1 = __importDefault(require("path"));
class TestingLanguageServiceHost {
    constructor(options) {
        this.files = (options.files || []).map(f => (Object.assign(Object.assign({}, f), { version: 0 })));
    }
    getCurrentDirectory() {
        return path_1.default.resolve(__dirname, '../../');
    }
    getScriptSnapshot(fileName) {
        const file = this.getFile(fileName);
        if (!file)
            return;
        return typescript_1.default.ScriptSnapshot.fromString(file.content);
    }
    getScriptVersion(fileName) {
        const file = this.getFile(fileName);
        if (!file)
            return '';
        return `${file.version}`;
    }
    getScriptFileNames() {
        return this.files.map(file => file.fileName);
    }
    getCompilationSettings() {
        return typescript_1.default.getDefaultCompilerOptions();
    }
    getDefaultLibFileName(opt) {
        return typescript_1.default.getDefaultLibFileName(opt);
    }
    getFile(fileName) {
        const file = this.files.find(file => file.fileName === fileName);
        return file;
    }
    updateFile(fileName, content) {
        const file = this.getFile(fileName);
        if (!file) {
            this.files.push({
                fileName,
                content,
                version: 0,
            });
        }
        else {
            file.content = content;
            file.version = file.version + 1;
        }
    }
}
exports.TestingLanguageServiceHost = TestingLanguageServiceHost;
function createTestingLanguageServiceAndHost(options) {
    const host = new TestingLanguageServiceHost(options);
    return {
        languageService: typescript_1.default.createLanguageService(host),
        languageServiceHost: host,
    };
}
exports.createTestingLanguageServiceAndHost = createTestingLanguageServiceAndHost;
function createTestingLanguageService(options) {
    return createTestingLanguageServiceAndHost(options).languageService;
}
exports.createTestingLanguageService = createTestingLanguageService;
//# sourceMappingURL=testing-language-service.js.map