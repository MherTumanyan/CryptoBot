#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const parser_1 = require("./parser");
const typegen_1 = require("./commands/typegen");
const extract_1 = require("./commands/extract");
const validate_1 = require("./commands/validate");
const report_1 = require("./commands/report");
const logger_1 = require("./logger");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const logger = new logger_1.ConsoleLogger();
        const parser = parser_1.createParser({
            options: {
                help: {
                    alias: 'h',
                    description: 'Print this message.',
                    type: 'boolean',
                },
                version: {
                    alias: 'v',
                    description: 'Print version.',
                    type: 'boolean',
                },
            },
            commands: {
                typegen: typegen_1.cliDefinition,
                extract: extract_1.cliDefinition,
                validate: validate_1.cliDefinition,
                report: report_1.cliDefinition,
            },
            logger,
        });
        const cli = parser.parse();
        if (cli.errors) {
            if (cli.errors.unknownCommand) {
                logger.error(`Unknown command name: ${cli.errors.unknownCommand}. Available commands are: ${cli
                    .availableCommandNames()
                    .join(', ')} .`);
            }
            process.exit(1);
        }
        if (!cli.command) {
            if (cli.options.help) {
                cli.showHelp();
                process.exit(0);
            }
            if (cli.options.version) {
                logger.info(require('../../package.json').version);
                process.exit(0);
            }
            cli.showHelp();
            process.exit(1);
        }
        else {
            if (cli.options.help) {
                cli.showCommandHelp(Object.keys(cli.command)[0]);
                process.exit(0);
            }
        }
        let result = false;
        try {
            if (cli.command.typegen) {
                result = yield typegen_1.typegenCommand(cli.command.typegen);
            }
            else if (cli.command.extract) {
                result = yield extract_1.extractCommand(cli.command.extract);
            }
            else if (cli.command.validate) {
                result = yield validate_1.validateCommand(cli.command.validate);
            }
            else if (cli.command.report) {
                result = yield report_1.reportCommand(cli.command.report);
            }
            process.exit(result ? 0 : 1);
        }
        catch (e) {
            logger.error(e);
            process.exit(1);
        }
    });
}
main();
//# sourceMappingURL=cli.js.map