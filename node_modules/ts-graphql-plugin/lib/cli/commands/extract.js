"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../logger");
exports.cliDefinition = {
    description: 'Extract GraphQL documents from TypeScript sources.',
    options: {
        project: {
            alias: 'p',
            description: "Analyze the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
            defaultValue: '.',
            type: 'string',
        },
        outFile: {
            alias: 'o',
            description: 'Output file name of manifest.',
            defaultValue: 'manifest.json',
            type: 'string',
        },
        verbose: {
            description: 'Show debug messages.',
            type: 'boolean',
        },
    },
};
function extractCommand({ options }) {
    return __awaiter(this, void 0, void 0, function* () {
        const ts = require('typescript');
        const { AnalyzerFactory, } = require('../../analyzer/analyzer-factory');
        const { ErrorReporter } = require('../../errors/error-reporter');
        const { color } = require('../../string-util');
        const logger = new logger_1.ConsoleLogger(options.verbose ? 'debug' : 'info');
        const errorReporter = new ErrorReporter(process.cwd(), logger.error.bind(logger));
        const { project, outFile } = options;
        const analyzer = new AnalyzerFactory().createAnalyzerFromProjectPath(project, logger.debug.bind(logger));
        const [errors, manifest] = analyzer.extractToManifest();
        if (errors.length) {
            logger.error(color.magenta('Found some errors extracting operations.\n'));
            errors.forEach(error => errorReporter.outputError(error));
        }
        ts.sys.writeFile(outFile, JSON.stringify(manifest, null, 2));
        logger.info(`Write manifest file to '${color.green(outFile)}'.`);
        return true;
    });
}
exports.extractCommand = extractCommand;
//# sourceMappingURL=extract.js.map