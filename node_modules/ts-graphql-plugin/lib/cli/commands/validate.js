"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../logger");
exports.cliDefinition = {
    description: 'Validate GraphQL documents in your TypeScript sources.',
    options: {
        project: {
            alias: 'p',
            description: "Analyze the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
            defaultValue: '.',
            type: 'string',
        },
        verbose: {
            description: 'Show debug messages.',
            type: 'boolean',
        },
        exitOnWarn: {
            description: 'Exit with code 0 even when warnings are found.',
            type: 'boolean',
        },
    },
};
function validateCommand({ options }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { AnalyzerFactory, } = require('../../analyzer/analyzer-factory');
        const { ErrorReporter } = require('../../errors/error-reporter');
        const { color } = require('../../string-util');
        const logger = new logger_1.ConsoleLogger(options.verbose ? 'debug' : 'info');
        const errorReporter = new ErrorReporter(process.cwd(), logger.error.bind(logger));
        const analyzer = new AnalyzerFactory().createAnalyzerFromProjectPath(options.project, logger.debug.bind(logger));
        const { errors } = yield analyzer.validate();
        const errorErrors = errors.filter(e => e.severity === 'Error');
        const warnErrors = errors.filter(e => e.severity === 'Warn');
        if (errorErrors.length) {
            logger.error(`Found ${color.red(errorErrors.length + '')} errors:`);
            errorErrors.forEach(errorReporter.outputError.bind(errorReporter));
        }
        if (warnErrors.length) {
            logger.error(`Found ${color.yellow(warnErrors.length + '')} warnings:`);
            warnErrors.forEach(errorReporter.outputError.bind(errorReporter));
        }
        if (errorErrors.length) {
            return false;
        }
        else if (warnErrors.length) {
            return options.exitOnWarn;
        }
        logger.info(color.green('No GraphQL validation errors.'));
        return true;
    });
}
exports.validateCommand = validateCommand;
//# sourceMappingURL=validate.js.map