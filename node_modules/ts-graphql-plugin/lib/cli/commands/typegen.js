"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../logger");
exports.cliDefinition = {
    description: 'Generate TypeScript types from GraphQL operations or fragments in your .ts source files.',
    options: {
        project: {
            alias: 'p',
            description: "Analyze the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
            defaultValue: '.',
            type: 'string',
        },
        verbose: {
            description: 'Show debug messages.',
            type: 'boolean',
        },
    },
};
function typegenCommand({ options }) {
    return __awaiter(this, void 0, void 0, function* () {
        const ts = require('typescript');
        const { AnalyzerFactory, } = require('../../analyzer/analyzer-factory');
        const { ErrorReporter } = require('../../errors/error-reporter');
        const { color } = require('../../string-util');
        const logger = new logger_1.ConsoleLogger(options.verbose ? 'debug' : 'info');
        const { project } = options;
        const errorReporter = new ErrorReporter(process.cwd(), logger.error.bind(logger));
        const analyzer = new AnalyzerFactory().createAnalyzerFromProjectPath(project, logger.debug.bind(logger));
        const { errors, outputSourceFiles } = yield analyzer.typegen();
        if (errors.length) {
            logger.error(`Found ${color.red(errors.length + '')} errors generating type files.\n`);
            errors.forEach(error => errorReporter.outputError(error));
        }
        if (!outputSourceFiles || outputSourceFiles.length === 0) {
            logger.error('No type files to generate.');
            return false;
        }
        const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed, removeComments: false });
        outputSourceFiles.forEach(source => ts.sys.writeFile(source.fileName, printer.printFile(source)));
        logger.info(`Write ${color.green(outputSourceFiles.length + ' type files')}.`);
        return true;
    });
}
exports.typegenCommand = typegenCommand;
//# sourceMappingURL=typegen.js.map