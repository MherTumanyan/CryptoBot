"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const path_1 = __importDefault(require("path"));
const extractor_1 = require("./extractor");
const script_source_helper_1 = require("../ts-ast-util/script-source-helper");
const errors_1 = require("../errors");
const string_util_1 = require("../string-util");
const validator_1 = require("./validator");
const markdown_reporter_1 = require("./markdown-reporter");
const type_gen_visitor_1 = require("../typegen/type-gen-visitor");
function convertSchemaBuildErrorsToErrorWithLocation(errorInfo) {
    const fileName = errorInfo.fileName;
    const content = errorInfo.fileContent;
    if (errorInfo.locations && errorInfo.locations[0]) {
        const start = string_util_1.location2pos(errorInfo.fileContent, errorInfo.locations[0]);
        const end = start + 1;
        const errorContent = { fileName, content, start, end };
        return new errors_1.ErrorWithLocation(errorInfo.message, errorContent);
    }
    else {
        const start = 0;
        const end = content.length - 1;
        const errorContent = { fileName, content, start, end };
        return new errors_1.ErrorWithLocation(errorInfo.message, errorContent);
    }
}
exports.convertSchemaBuildErrorsToErrorWithLocation = convertSchemaBuildErrorsToErrorWithLocation;
class Analyzer {
    constructor(_pluginConfig, _prjRootPath, _languageServiceHost, _schemaManager, _debug) {
        this._pluginConfig = _pluginConfig;
        this._prjRootPath = _prjRootPath;
        this._languageServiceHost = _languageServiceHost;
        this._schemaManager = _schemaManager;
        this._debug = _debug;
        const langService = typescript_1.default.createLanguageService(this._languageServiceHost);
        this._scriptSourceHelper = script_source_helper_1.createScriptSourceHelper({
            languageService: langService,
            languageServiceHost: this._languageServiceHost,
        });
        this._extractor = new extractor_1.Extractor({
            removeDuplicatedFragments: this._pluginConfig.removeDuplicatedFragments === false ? false : true,
            scriptSourceHelper: this._scriptSourceHelper,
            debug: this._debug,
        });
    }
    getPluginConfig() {
        return this._pluginConfig;
    }
    extract(fileNameList) {
        const results = this._extractor.extract(fileNameList || this._languageServiceHost.getScriptFileNames(), this._pluginConfig.tag);
        const errors = this._extractor.pickupErrors(results);
        return [errors, results];
    }
    extractToManifest() {
        const [errors, results] = this.extract();
        const manifest = this._extractor.toManifest(results, this._pluginConfig.tag);
        return [errors, manifest];
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            const [schemaErrors, schema] = yield this._getSchema();
            if (!schema)
                return { errors: schemaErrors };
            const [extractedErrors, results] = this.extract();
            if (extractedErrors.length) {
                this._debug(`Found ${extractedErrors.length} extraction errors.`);
            }
            return {
                errors: [...schemaErrors, ...extractedErrors, ...validator_1.validate(results, schema)],
                extractedResults: results,
                schema,
            };
        });
    }
    report(outputFileName, manifest, ignoreFragments = true) {
        const reporter = new markdown_reporter_1.MarkdownReporter();
        const reportOptions = {
            baseDir: this._prjRootPath,
            ignoreFragments,
            outputDir: path_1.default.dirname(outputFileName),
        };
        if (manifest) {
            return [[], reporter.toMarkdownConntent(manifest, reportOptions)];
        }
        else {
            const [errors, extractedManifest] = this.extractToManifest();
            return [errors, reporter.toMarkdownConntent(extractedManifest, reportOptions)];
        }
    }
    typegen() {
        return __awaiter(this, void 0, void 0, function* () {
            const [schemaErrors, schema] = yield this._getSchema();
            if (!schema)
                return { errors: schemaErrors };
            const [extractedErrors, extractedResults] = this.extract();
            if (extractedErrors.length) {
                this._debug(`Found ${extractedErrors.length} extraction errors.`);
            }
            const typegenErrors = [];
            const visitor = new type_gen_visitor_1.TypeGenVisitor({ schema });
            const outputSourceFiles = [];
            extractedResults.forEach(r => {
                if (r.documentNode) {
                    const { type, fragmentName, operationName } = this._extractor.getDominantDefiniton(r);
                    if (type === 'complex') {
                        const fileName = r.fileName;
                        const content = r.templateNode.getSourceFile().getFullText();
                        const start = r.templateNode.getStart();
                        const end = r.templateNode.getEnd();
                        const errorContent = { fileName, content, start, end };
                        const error = new errors_1.ErrorWithLocation('This document node has complex operations.', errorContent);
                        typegenErrors.push(error);
                        return;
                    }
                    const operationOrFragmentName = type === 'fragment' ? fragmentName : operationName;
                    if (!operationOrFragmentName)
                        return;
                    const outputFileName = path_1.default.resolve(path_1.default.dirname(r.fileName), '__generated__', string_util_1.dasherize(operationOrFragmentName) + '.ts');
                    try {
                        outputSourceFiles.push(visitor.visit(r.documentNode, { outputFileName }));
                        this._debug(`Create type source file '${path_1.default.relative(this._prjRootPath, outputFileName)}' from '${path_1.default.relative(this._prjRootPath, r.fileName)}'.`);
                    }
                    catch (error) {
                        if (error instanceof type_gen_visitor_1.TypeGenError) {
                            const sourcePosition = r.resolevedTemplateInfo.getSourcePosition(error.node.loc.start);
                            if (sourcePosition.isInOtherExpression)
                                return;
                            const fileName = r.fileName;
                            const content = r.templateNode.getSourceFile().getFullText();
                            const start = sourcePosition.pos;
                            const end = r.resolevedTemplateInfo.getSourcePosition(error.node.loc.end).pos;
                            const errorContent = { fileName, content, start, end };
                            const translatedError = new errors_1.ErrorWithLocation(error.message, errorContent);
                            typegenErrors.push(translatedError);
                        }
                        else {
                            throw error;
                        }
                    }
                }
            });
            return { errors: [...schemaErrors, ...extractedErrors, ...typegenErrors], outputSourceFiles };
        });
    }
    _getSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            const errors = [];
            const { schema, errors: schemaBuildErrors } = yield this._schemaManager.waitSchema();
            if (schemaBuildErrors) {
                schemaBuildErrors.forEach(info => errors.push(convertSchemaBuildErrorsToErrorWithLocation(info)));
            }
            if (!schema && !errors.length) {
                const error = new errors_1.ErrorWithoutLocation('No GraphQL schema. Confirm your ts-graphql-plugin\'s "schema" configuration at tsconfig.json\'s compilerOptions.plugins section.');
                errors.push(error);
            }
            return [errors, schema];
        });
    }
}
exports.Analyzer = Analyzer;
//# sourceMappingURL=analyzer.js.map