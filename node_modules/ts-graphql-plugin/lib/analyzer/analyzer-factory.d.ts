import ts from 'typescript';
import { Analyzer } from './analyzer';
export declare class ScriptHost implements ts.LanguageServiceHost {
    private readonly _currentDirectory;
    private readonly _compilerOptions;
    private readonly _fileMap;
    private readonly _fileVersionMap;
    constructor(_currentDirectory: string, _compilerOptions: ts.CompilerOptions);
    readFile(fileName: string): string | undefined;
    updateFile(fileName: string): string | undefined;
    getCurrentDirectory(): string;
    getScriptSnapshot(fileName: string): ts.IScriptSnapshot | undefined;
    getScriptVersion(fileName: string): string;
    getScriptFileNames(): string[];
    getCompilationSettings(): ts.CompilerOptions;
    getDefaultLibFileName(opt: ts.CompilerOptions): string;
}
export declare class AnalyzerFactory {
    createAnalyzerAndScriptHostFromProjectPath(projectPath: string, debug?: (msg: string) => void, currentDirectory?: string): {
        analyzer: Analyzer;
        scriptHost: ScriptHost;
    };
    createAnalyzerFromProjectPath(projectPath: string, debug?: (msg: string) => void, currentDirectory?: string): Analyzer;
    private _readTsconfig;
}
