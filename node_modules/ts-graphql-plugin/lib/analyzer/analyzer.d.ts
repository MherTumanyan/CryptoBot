import ts from 'typescript';
import { TsGraphQLPluginConfigOptions } from '../types';
import { SchemaManager, SchemaBuildErrorInfo } from '../schema-manager/schema-manager';
import { TsGqlError, ErrorWithLocation } from '../errors';
import { ManifestOutput } from './types';
export declare function convertSchemaBuildErrorsToErrorWithLocation(errorInfo: SchemaBuildErrorInfo): ErrorWithLocation;
export declare class Analyzer {
    private readonly _pluginConfig;
    private readonly _prjRootPath;
    private readonly _languageServiceHost;
    private readonly _schemaManager;
    private readonly _debug;
    private _extractor;
    private _scriptSourceHelper;
    constructor(_pluginConfig: TsGraphQLPluginConfigOptions, _prjRootPath: string, _languageServiceHost: ts.LanguageServiceHost, _schemaManager: SchemaManager, _debug: (msg: string) => void);
    getPluginConfig(): TsGraphQLPluginConfigOptions;
    extract(fileNameList?: string[]): readonly [ErrorWithLocation[], import("./extractor").ExtractResult[]];
    extractToManifest(): readonly [ErrorWithLocation[], ManifestOutput];
    validate(): Promise<{
        errors: TsGqlError[];
        extractedResults?: undefined;
        schema?: undefined;
    } | {
        errors: TsGqlError[];
        extractedResults: import("./extractor").ExtractResult[];
        schema: import("graphql").GraphQLSchema;
    }>;
    report(outputFileName: string, manifest?: ManifestOutput, ignoreFragments?: boolean): readonly [TsGqlError[], string | null];
    typegen(): Promise<{
        errors: TsGqlError[];
        outputSourceFiles?: undefined;
    } | {
        errors: TsGqlError[];
        outputSourceFiles: ts.SourceFile[];
    }>;
    private _getSchema;
}
