directive @ObjectId(value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
 input TimestampType {
  type: Boolean
  createdAt: String
  updatedAt: String
}

directive @namespace(value: String) on OBJECT | INPUT_OBJECT

directive @collection(value: String) on OBJECT | INPUT_OBJECT

directive @version(value: String) on OBJECT | INPUT_OBJECT

directive @ignore(value: String) on OBJECT | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @default(value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @required(value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @unique(value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @setonce on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @uuid on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @optional on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @min(value: Int) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @max(value: Int) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @minlength(value: Int) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @maxlength(value: Int) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @trim(value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @uppercase(value: Int) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @lowercase(value: Int) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @hash(value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @extends(value: String, select: [String], reject: [String], fragment: [String]) on OBJECT | INPUT_OBJECT

directive @mongo(timestamps: TimestampType) on OBJECT | INPUT_OBJECT

directive @fragment(value: [String]) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type Mutation {
  registerTelegramUser(firstName: String, lastName: String, telegramId: String): RegisterUser @isService
  updateUser(nickName: String, language: LANGUAGE): UpdateUser @isAuthenticated
  sendVerificationSms(phoneNumber: String): OperationStatus @isAuthenticated
  verifyActivationCode(code: String): OperationStatus @isAuthenticated
  toggleNotify(notify: Boolean): OperationStatus @isAuthenticated
}

type Query {
  getUserInfo: UserInfo @isAuthenticated
  getAccount(accountId: String, externalCall: Boolean): AccountOwnerName @isAuthenticated
  getWhiteLists: Whitelist @isService
  getUnconfirmedBalance: UnconfirmedBalanceInfo @isAuthenticated
  getRecentReceivers: SuggestedReceivers @isAuthenticated
}

type UserInfo {
  _id: ID
  createdAt: Date
  updatedAt: Date
  uuid: String @unique @uuid
  telegramId: String!
  accountId: String!
  firstName: String
  lastName: String
  nickName: String
  language: LANGUAGE @default(value: "EN")
  balance: UserBalance
  lastInteraction: Date
  role: UserRole @default(value: "USER")
  phoneNumber: String
  verified: Boolean @default(value: "false")
  verificationCode: String
  isBlocked: Boolean @default(value: "false")
  notify: Boolean @default(value: "true")
  balanceUSD: UserBalance
}

type UnconfirmedBalanceInfo {
  unconfirmedBalance: UserBalance
  unconfirmedBalanceUSD: UserBalance
}

type RegisterUser {
  error: String
  code: Int
  success: Boolean
  _id: String
  telegramId: String
  accountId: String
  firstName: String
  lastName: String
}

type UpdateUser {
  error: String
  code: Int
  success: Boolean
  data: User
}

type Mutation {
  changeGeneralSettings(language: LANGUAGE, currency: CurrencyType): OperationStatus @isAuthenticated
}

type Mutation {
  checkEasyTransferStatus: OperationStatus @isService
  checkOutgoingTransactionStatus: OperationStatus @isService
  checkReceiveCoinTransactions: OperationStatus @isService
  setCurrencyExchangeRates: OperationStatus @isService
  updateCurrencyExchangeRates: OperationStatus @isService
}

type Query {
  getTechnicalDetails: Technical @isAdmin
  sendNotifications(message: String!, telegramIds: [String]): OperationStatus @isAdmin
  dailyReport: OperationStatus @isService
}

input UpdateElectrumFees {
  amountUSD: Float
  fee: Float
  feeUSD: Float
  rateId: String
}

input UpdateEasyTransferFee {
  easyTransferFeeUSD: Float
  easyTransferFee: Float
}

directive @isAuthenticated on FIELD_DEFINITION

directive @isAdmin on FIELD_DEFINITION

directive @isService on FIELD_DEFINITION

enum NetworkRulesEnum {
  IN
  OUT
}

enum LANGUAGE {
  EN
  RU
  AM
}

enum CoinType {
  BTC
  DASH
  ETH
  USDT
}

enum CurrencyType {
  USD
  RUB
  AMD
}

enum IncomingTransactionMethod {
  PAYMENT
  EASY_TRANSFER
  INTERNAL_PAYMENT
}

enum OutgoingTransactionMethod {
  WITHDRAW
  EASY_TRANSFER
  INTERNAL_WITHDRAW
  WITHDRAW_BUY_BTC_FOR_FRIEND
  EASY_TRANSFER_BUY_BTC_FOR_YOURSELF
  EASY_TRANSFER_BUY_BTC_FOR_FRIEND
}

enum TransactionMethod {
  WITHDRAW
  EASY_TRANSFER
  INTERNAL_WITHDRAW
  PAYMENT
  INTERNAL_PAYMENT
  WITHDRAW_BUY_BTC_FOR_FRIEND
  EASY_TRANSFER_BUY_BTC_FOR_YOURSELF
  EASY_TRANSFER_BUY_BTC_FOR_FRIEND
  CASHBACK
}

enum TransactionStatus {
  PENDING
  INPROGRESS
  RESOLVED
  CONFIRMED
  COMPLETED
  CANCELED
  FAILED
  EXPIRED
  SYSTEM_CANCELED
  SENT
}

enum ReceivingAddressStatus {
  ACTIVE
  EXPIRED
}

enum WalletType {
  ELECTRUM
}

enum UserRole {
  ADMIN
  USER
}

enum AcceptationStatus {
  PENDING
  EXPIRED
  SELLER_SELECTED
  BUYER_SELECTED
  BUYER_PAYED
  INCOMPLETE_PAYMENT
  DONE
  BLOCKED
  BUYER_CANCELED
  SYSTEM_CANCELED
  SELECTED
}

enum PAYMENTMETHOD {
  TELCELL
  EASYPAY
  IDRAM
}

type Rates {
  USD: Float
  RUB: Float
  AMD: Float
}

type ExchangeRates {
  USDToUSDTExchangeRate: Float
  BTCToDASHExchangeRate: Float
  BTCToETHExchangeRate: Float
  USDToDASHExchangeRate: Float
  RUBToUSDTExchangeRate: Float
  RUBToAMDExchangeRate: Float
  RUBToUSDExchangeRate: Float
  USDToETHExchangeRate: Float
  RUBToBTCExchangeRate: Float
  USDToAMDExchangeRate: Float
  BTCToRUBExchangeRate: Float
  RUBToETHExchangeRate: Float
  USDToBTCExchangeRate: Float
  BTCToAMDExchangeRate: Float
  BTCToUSDTExchangeRate: Float
  BTCToUSDExchangeRate: Float
  RUBToDASHExchangeRate: Float
  USDToRUBExchangeRate: Float
  DASHToUSDExchangeRate: Float
  ETHToRUBExchangeRate: Float
  DASHToBTCExchangeRate: Float
  ETHToBTCExchangeRate: Float
  DASHToRUBExchangeRate: Float
  ETHToAMDExchangeRate: Float
  ETHToUSDExchangeRate: Float
  USDTToDASHExchangeRate: Float
  ETHToDASHExchangeRate: Float
  USDTToETHExchangeRate: Float
  DASHToETHExchangeRate: Float
  ETHToUSDTExchangeRate: Float
  USDTToRUBExchangeRate: Float
  USDTToUSDExchangeRate: Float
  DASHToAMDExchangeRate: Float
  USDTToAMDExchangeRate: Float
  USDTToBTCExchangeRate: Float
  DASHToUSDTExchangeRate: Float
  AMDToBTCExchangeRate: Float
  AMDToUSDExchangeRate: Float
  AMDToUSDTExchangeRate: Float
  AMDToRUBExchangeRate: Float
  AMDToDASHExchangeRate: Float
  AMDToETHExchangeRate: Float
}

enum AddressPurpose {
  SELLER_PAYMENT
  EXTERNAL_PAYMENT
}

enum HistoryTransactionType {
  IN
  OUT
  BUY_BTC_OFFER
}

enum ElectrumWalletType {
  IN
  OUT
}

type HistoryMeta @namespace(value: "master") @collection(value: "historyMeta") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  transactionId: String
  transactionType: HistoryTransactionType
  userId: String
  transactionStatus: TransactionStatus @default(value: PENDING)
}

type IncomingTransaction @namespace(value: "master") @collection(value: "incomingTransactions") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  transactionType: String @default(value: "IN")
  userId: String
  address: String
  txId: String @unique
  amount: Float
  coinType: CoinType
  amountCurrency: OfferAmount
  amountUSD: Float
  hash: String
  method: IncomingTransactionMethod @default(value: PAYMENT)
  status: TransactionStatus @default(value: PENDING)
  fromAccount: String
  orderId: String
}

type OutgoingTransaction @namespace(value: "master") @collection(value: "outgoingTransactions") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  transactionType: String @default(value: "OUT")
  userId: String!
  txid: String
  receiverAddress: String
  outgoingAmount: Float
  outgoingAmountUSD: Float
  outgoingAmountWithFee: Float
  outgoingAmountWithFeeUSD: Float
  outgoingAmountCurrency: OfferAmount
  coinType: CoinType
  status: TransactionStatus @default(value: PENDING)
  method: OutgoingTransactionMethod @default(value: WITHDRAW)
  orderId: String @unique
  toAccount: String
  outgoingTransactionFeeInPercent: Float
  validDate: Float
  coinBaseTransactionId: String
}

type ReceivingAddress @namespace(value: "master") @collection(value: "receivingAddresses") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  userId: String!
  address: String!
  coinType: String!
  providerType: String @default(value: "COINBASE")
  status: String @default(value: "ACTIVE")
  addressHistory: [String]
}

scalar Date

type SuggestedReceivers @namespace(value: "master") @collection(value: "suggestedReceivers") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  ownerId: String
  internal: [String] @default(value: [])
  external: ExternalAddress
}

type ExternalAddress {
  BTC: [String] @default(value: [])
  USDT: [String] @default(value: [])
  ETH: [String] @default(value: [])
  DASH: [String] @default(value: [])
}

type Technical @namespace(value: "master") @collection(value: "technicals") {
  minTransactionUSD: Float
  maxTransactionUSD: Float
  exchangeRates: Rates
  fees: Fees
  schedulerRecurrenceTimes: Recurrences
  rates: ExchangeRates
  suggestedReceiversCount: Float
}

type AccountOwnerName {
  accountId: String
  name: String
}

type BTCWallet {
  address: String
}

type WithdrawFee {
  id: String
  amountUSD: Float
  fee: Float
  feeUSD: Float
}

type EasyTransferFee {
  id: String
  amountUSD: Float
  fee: Float
  feeUSD: Float
}

type Fees {
  withdrawFees: [WithdrawFee]
  fixWithdrawFee: WithdrawFee
  easyTransferFees: [EasyTransferFee]
}

type Recurrences {
  everyOneMinute: String
}

type BestPrice {
  value: String
  unit: CurrencyType @default(value: "USD")
}

input BestPriceInput {
  value: String
  unit: CurrencyType
}

type OfferAmount {
  value: Float
  unit: CurrencyType
}

type OperationStatus {
  error: String
  code: Int
  success: Boolean
}

type NeedVerification {
  error: String
  code: Int
  success: Boolean
  needVerification: Boolean
}

type User @namespace(value: "master") @collection(value: "users") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  uuid: String @unique @uuid
  telegramId: String!
  accountId: String!
  firstName: String
  lastName: String
  nickName: String
  language: LANGUAGE @default(value: "EN")
  balance: UserBalance
  lastInteraction: Date
  role: UserRole @default(value: "USER")
  phoneNumber: String
  verified: Boolean @default(value: "false")
  verificationCode: String
  isBlocked: Boolean @default(value: "false")
  notify: Boolean @default(value: "true")
}

type UserBalance {
  BTC: Float! @default(value: 0.0)
  USDT: Float! @default(value: 0.0)
  ETH: Float! @default(value: 0.0)
  DASH: Float! @default(value: 0.0)
  totalUSD: Float @default(value: 0.0)
}

type Whitelist @namespace(value: "master") @collection(value: "whitelists") {
  _id: ID
  createdAt: Date
  updatedAt: Date
  whitelists: Whitelists
}

type Whitelists {
  whitelistForDev: [String]
}

type Mutation {
  createWithdrawOrder(amountInCurrency: Float, currency: CurrencyType, coinType: CoinType, coinAddress: String, maxAvailableBalance: Boolean): WithdrawOrderResponse @isAuthenticated
  acceptWithdrawOrder(orderId: String): OperationStatus @isAuthenticated
  createInternalWithdrawOrder(amountInCurrency: Float, currency: CurrencyType, coinType: CoinType, coinAddress: String, maxAvailableBalance: Boolean): WithdrawOrderResponse @isAuthenticated
  acceptInternalWithdrawOrder(orderId: String): OperationStatus @isAuthenticated
  cancelWithdraw(orderId: String): OperationStatus @isAuthenticated
  createEasyTransferOrder(amountInCurrency: Float, currency: CurrencyType, coinType: CoinType, receiverAccountId: String, maxAvailableBalance: Boolean): EasyTransferOrderResponse @isAuthenticated
  acceptEasyTransferOrder(orderId: String): OperationStatus @isAuthenticated
  cancelEasyTransfer(orderId: String): OperationStatus @isAuthenticated
  receiveCoins(address: String, total: amount, transactionId: String, hash: String): OperationStatus @isService
}

type Query {
  getOrderId: OrderId
  getIncomingTransactions: [IncomingTransaction] @isAuthenticated
  getOutgoingTransactions: [OutgoingTransaction] @isAuthenticated
  getMinAndMaxTransactionValue(coinType: CoinType, currency: CurrencyType): LimitedValues @isAuthenticated
  getUsdAmount(btcAmount: Float, toFixed: Int): CurrencyValue @isAuthenticated
  getWithdrawTransactionFee: [SortedFee] @isAuthenticated
  getEasyTransferFee: [SortedFee] @isAuthenticated
  validateTransferAmount(amountInCoin: Float, totalAmountInCoin: Float, coin: CoinType): ValidAmount @isAuthenticated
  validatePhoneNumber(phoneNumber: String): ValidPhoneNumber @isAuthenticated
  validateDigits(phoneNumber: String): ValidPhoneNumber @isAuthenticated
  validateName(name: String): OperationStatus @isService
  validateCurrencyValue(value: String, currency: CurrencyType, withoutMinAmount: Boolean, withoutMaxAmount: Boolean): ValidBtcValue @isAuthenticated
  getHistory(skip: Int, limit: Int): [HistoryResponse] @isAuthenticated
  getNewReceivingAddress(coinType: String!): String @isAuthenticated
  isAddressInternal(address: String, coinType: CoinType): Boolean @isAuthenticated
  validateCoinAddress(coinAddress: String, coinType: CoinType, externalCall: Boolean): OperationStatus @isAuthenticated
}

type Address {
  address: String
}

type Valid {
  error: String
  code: Int
  success: Boolean
  maxError: Boolean
  minError: Boolean
  isNanOrInvalidBalance: Boolean
}

type ValidAmount {
  valid: Valid
}

type InternalAddress {
  isInternal: Boolean
}

type OrderId {
  id: String
}

type EasyTransfer {
  amountInCoin: Float
  amountInUSD: Float
  amountInCurrency: Float
  easyTransferFeeInitialPercent: Float
  easyTransferFeeInitialUSD: Float
  easyTransferFeeInPercent: Float
  easyTransferFeeCoin: Float
  easyTransferFeeInCurrency: Float
  totalEasyTransferAmountInCoin: Float
  totalEasyTransferAmountInCurrency: Float
  totalEasyTransferAmountInUsd: Float
}

type Withdraw {
  amountInCoin: Float
  amountInUSD: Float
  amountInCurrency: Float
  withdrawFeeInitialPercent: Float
  withdrawFeeInitialUSD: Float
  withdrawFeeInPercent: Float
  withdrawFeeCoin: Float
  withdrawFeeInCurrency: Float
  totalWithdrawAmountInCoin: Float
  totalWithdrawAmountInCurrency: Float
  totalWithdrawAmountInUsd: Float
}

type WithdrawFeeByCoin {
  withdrawFeeInitialPercent: Float
  withdrawFeeInitialUSD: Float
  withdrawFeeCoinUSD: Float
  withdrawFeeCoin: Float
}

type EasyTransferFeeByCoin {
  easyTransferFeePercent: Float
  easyTransferFeeUSD: Float
  easyTransferFeeCoinUSD: Float
  easyTransferFeeCoin: Float
}

type CurrencyValue {
  value: Float
}

type ValidPhoneNumber {
  error: String
  code: Int
  success: Boolean
  phoneNumber: String
}

type ValidBtcValue {
  error: String
  code: Int
  success: Boolean
  value: String
}

input Offer {
  btcAmount: String
}

type TransferResponse {
  error: String
  code: Int
  success: Boolean
  isInternalWithdraw: Boolean
  orderId: String
}

type WithdrawFee {
  id: String
  amount: Float
  fee: Float
}

type SortedFee {
  feeInPercent: Float
  feeInUSD: Float
  from: String
  to: String
}

type HistoryResponse {
  createdAt: Date
  orderId: String
  transactionType: NetworkRulesEnum
  method: TransactionMethod
  amount: Float
  amountUSD: Float
  feeUSD: Float
  feeCoin: Float
  sender: CredentialsHistory
  receiver: CredentialsHistory
  status: TransactionStatus
  discount: Float
  outgoingTransactionFeeInPercent: Float
  coinType: CoinType
}

type CredentialsHistory {
  nickName: String
  address: String
}

type LimitedValues {
  minTransactionValue: Float
  maxTransactionValue: Float
  minTransactionValueInCoin: Float
  maxTransactionValueInCoin: Float
}

input SenderInfo {
  accountId: String
  nickName: String
}

input amount {
  amount: String
  currency: String
}

type EasyTransferOrderResponse {
  error: String
  code: Int
  success: Boolean
  data: EasyTransferOrder
  maxError: Boolean
  minError: Boolean
  isNanOrInvalidBalance: Boolean
}

type WithdrawOrderResponse {
  error: String
  code: Int
  success: Boolean
  data: WithdrawOrder
  maxError: Boolean
  minError: Boolean
  isNanOrInvalidBalance: Boolean
}

type EasyTransferOrder {
  currency: CurrencyType
  coinType: CoinType
  amountInCurrency: Float
  amountInCoin: Float
  easyTransferFeeCoin: Float
  totalEasyTransferAmountInCoin: Float
  easyTransferFeeInCurrency: Float
  totalEasyTransferAmountInCurrency: Float
  easyTransferFeeInPercent: Float
  orderId: String
  validDate: Float
  easyTransferExpireTime: Float
}

type WithdrawOrder {
  currency: CurrencyType
  coinType: CoinType
  amountInCurrency: Float
  amountInCoin: Float
  withdrawFeeCoin: Float
  totalWithdrawAmountInCoin: Float
  withdrawFeeInCurrency: Float
  totalWithdrawAmountInCurrency: Float
  withdrawFeeInPercent: Float
  orderId: String
  validDate: Float
  withdrawExpireTime: Float
}

type EasyTransferFeePercent {
  min: Float
  max: Float
  fee: Float
}
